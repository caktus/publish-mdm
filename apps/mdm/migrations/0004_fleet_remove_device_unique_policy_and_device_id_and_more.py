# Generated by Django 5.2.1 on 2025-05-28 15:32

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def create_fleets(apps, schema_editor):
    policy_model = apps.get_model("mdm", "Policy")
    if settings.TINYMDM_DEFAULT_POLICY:
        default_policy = policy_model.objects.filter(
            policy_id=settings.TINYMDM_DEFAULT_POLICY
        ).first()
    else:
        default_policy = policy_model.objects.order_by("id").first()
    if not default_policy:
        # Cannot create fleets since they have to be linked to a policy
        return
    if not default_policy.default_policy:
        default_policy.default_policy = True
        default_policy.save()
    # Create the default Fleet for every existing Organization
    for org in apps.get_model("publish_mdm", "Organization").objects.all():
        if default_policy.project.organization_id == org.id:
            project = default_policy.project
        else:
            project = None
        fleet = org.fleets.create(
            name="Default",
            policy=default_policy,
            project=project,
        )
    # Set the fleet field in all existing Devices
    fleet_model = apps.get_model("mdm", "Fleet")
    device_model = apps.get_model("mdm", "Device")
    for policy_id, policy_name, project_id, organization_id in (
        device_model.objects.values_list(
            "policy", "policy__name", "policy__project", "policy__project__organization"
        )
        .order_by()
        .distinct()
    ):
        fleet = fleet_model.objects.get_or_create(
            policy_id=policy_id,
            organization_id=organization_id,
            defaults=dict(
                name=policy_name,
                project_id=project_id,
            ),
        )[0]
        device_model.objects.filter(policy_id=policy_id).update(fleet=fleet)


class Migration(migrations.Migration):
    dependencies = [
        ("mdm", "0003_firmwaresnapshot"),
        ("publish_mdm", "0012_project_app_language"),
    ]

    operations = [
        migrations.CreateModel(
            name="Fleet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "mdm_group_id",
                    models.CharField(
                        help_text="The ID of the group in the MDM.",
                        max_length=32,
                        null=True,
                        unique=True,
                        verbose_name="MDM Group ID",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="fleet",
            name="organization",
            field=models.ForeignKey(
                help_text="The organization that this fleet belongs to.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="fleets",
                to="publish_mdm.organization",
            ),
        ),
        migrations.AddField(
            model_name="fleet",
            name="policy",
            field=models.ForeignKey(
                help_text="The MDM policy to assign for this fleet of devices.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="fleets",
                to="mdm.policy",
            ),
        ),
        migrations.AddField(
            model_name="fleet",
            name="project",
            field=models.ForeignKey(
                blank=True,
                help_text="The project to deploy to this fleet of devices.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="fleets",
                to="publish_mdm.project",
            ),
        ),
        migrations.AddConstraint(
            model_name="fleet",
            constraint=models.UniqueConstraint(
                fields=("organization", "name"), name="unique_org_and_name"
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="fleet",
            field=models.ForeignKey(
                null=True,
                help_text="The fleet that the device is assigned to.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="devices",
                to="mdm.fleet",
            ),
        ),
        migrations.AddField(
            model_name="policy",
            name="default_policy",
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(create_fleets, migrations.RunPython.noop),
        migrations.AlterField(
            model_name="device",
            name="fleet",
            field=models.ForeignKey(
                help_text="The fleet that the device is assigned to.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="devices",
                to="mdm.fleet",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="device",
            name="unique_policy_and_device_id",
        ),
        migrations.RemoveField(
            model_name="device",
            name="policy",
        ),
        migrations.RemoveField(
            model_name="policy",
            name="project",
        ),
        migrations.AlterField(
            model_name="device",
            name="device_id",
            field=models.CharField(
                blank=True,
                help_text="The ID of the device in the MDM.",
                max_length=32,
                null=True,
                unique=True,
                verbose_name="Device ID",
            ),
        ),
        migrations.AddConstraint(
            model_name="policy",
            constraint=models.UniqueConstraint(
                condition=models.Q(("default_policy", True)),
                fields=("default_policy",),
                name="unique_default_policy",
                violation_error_message="A default policy already exists.",
            ),
        ),
        migrations.AlterModelOptions(
            name="policy",
            options={"ordering": ("-default_policy", "id"), "verbose_name_plural": "policies"},
        ),
        migrations.AlterField(
            model_name="device",
            name="serial_number",
            field=models.CharField(
                blank=True, help_text="The serial number of the device.", max_length=255
            ),
        ),
    ]
